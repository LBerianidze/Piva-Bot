<?php/** * Created by PhpStorm. * User: Ğ›ÑƒĞºĞ° * Date: 07.05.2019 * Time: 21:54 */class DBConfig{	var $db_host = "localhost";	var $db_name = "vh368883_telegram_bot";	var $db_user = "vh368883_root";	var $db_pass = "tSUK78Gn";	var $db_con = null;	public function __construct()	{		try		{			$this->db_con = new PDO("mysql:host={$this->db_host};dbname={$this->db_name}", $this->db_user, $this->db_pass);			$this->db_con->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);			$this->db_con->exec("set names utf8");		}		catch (PDOException $e)		{			echo $e->getMessage();		}	}	public function addUser($id)	{		$request = $this->db_con->prepare('INSERT INTO `users`(`telegram_id`) VALUES (:param1)');		$request->execute(array(':param1' => $id));	}	public function userExists($id)	{		$request = $this->db_con->prepare('select count(*) as Count from `users` where `telegram_id` = :param1');		$request->execute(array(':param1' => $id));		$result = $request->fetchAll(PDO::FETCH_OBJ);		$result = $result[0]->Count;		return $result > 0;	}	public function getBeerList()	{		$request = $this->db_con->prepare('select * from `beer`');		$request->execute();		$result = $request->fetchAll(PDO::FETCH_ASSOC);		return $result;	}	public function getBeer($beer_id)	{		$request = $this->db_con->prepare('select * from `beer` where `id`=:param1');		$request->execute(array(':param1' => $beer_id));		$result = $request->fetchAll(PDO::FETCH_ASSOC);		return $result[0];	}	public function getUser($chat_id)	{		$request = $this->db_con->prepare('select * from `users` where `telegram_id`=:param1');		$request->execute(array(':param1' => $chat_id));		$result = $request->fetchAll(PDO::FETCH_ASSOC);		return $result[0];	}	public function getAllUsers()	{		$request = $this->db_con->prepare('select telegram_id from `users`');		$request->execute(array());		$result = $request->fetchAll(PDO::FETCH_ASSOC);		return $result;	}	public function getStep($chat_id)	{		$request = $this->db_con->prepare('select * from `users` where `telegram_id`=:param1');		$request->execute(array(':param1' => $chat_id));		$result = $request->fetchAll(PDO::FETCH_ASSOC);		return $result[0]['order_step'];	}	public function setStep($chat_id, $step)	{		$request = $this->db_con->prepare('UPDATE `users` SET `order_step`=:param1 WHERE `telegram_id`=:param2');		$request->execute(array(			':param1' => $step,			':param2' => $chat_id		));	}	public function setName($chat_id, $name)	{		$request = $this->db_con->prepare('UPDATE `users` SET `name`=:param1 WHERE `telegram_id`=:param2');		$request->execute(array(			':param1' => $name,			':param2' => $chat_id		));	}	public function setPhone($chat_id, $phone)	{		$request = $this->db_con->prepare('UPDATE `users` SET `phone`=:param1 WHERE `telegram_id`=:param2');		$request->execute(array(			':param1' => $phone,			':param2' => $chat_id		));	}	public function setAddress($chat_id, $address)	{		$request = $this->db_con->prepare('UPDATE `users` SET `address`=:param1 WHERE `telegram_id`=:param2');		$request->execute(array(			':param1' => $address,			':param2' => $chat_id		));	}	public function getAllBasketBeers($user_id)	{		$request = $this->db_con->prepare('select * from `basket_beer` where `user_id`=:param1');		$request->execute(array(':param1' => $user_id));		$result = $request->fetchAll(PDO::FETCH_ASSOC);		return $result;	}	public function clearBasket($user_id)	{		$request = $this->db_con->prepare('delete from `basket_beer` where `user_id`=:param1');		$request->execute(array(			':param1' => $user_id,		));	}	public function deleteAllBeer()	{		$request = $this->db_con->prepare('truncate table `beer`');		$request->execute();	}	public function deleteOldBeers($max_id)	{		$request = $this->db_con->prepare('DELETE FROM `basket_beer` WHERE `beer_id` > :param1');		$request->execute(array(			':param1' => $max_id,		));	}	public function addBeer($brewery, $name, $style, $percent, $price, $image)	{		$request = $this->db_con->prepare('INSERT INTO `beer`( `brewery`, `name`, `style`, `percent`, `price`, `image`) VALUES (:param1,:param2,:param3,:param4,:param5,:param6)');		$request->execute(array(			':param1' => $brewery,			':param2' => $name,			':param3' => $style,			':param4' => $percent,			':param5' => $price,			':param6' => $image,		));	}	public function addBeerToBasket($user_id, $beer_id, $price = 0)	{		$resp = $this->checkIfBeerExistsInBasket($user_id, $beer_id);		if ($resp)		{			$request = $this->db_con->prepare('UPDATE `basket_beer` SET `count`=`count`+1 WHERE `user_id`=:param1 and `beer_id`=:param2');			$request->execute(array(				':param1' => $user_id,				':param2' => $beer_id			));			return $resp + 1;		}		else		{			$request = $this->db_con->prepare('INSERT INTO `basket_beer`( `user_id`, `beer_id`, `count`,`price`) VALUES (:param1,:param2,:param3,:param4)');			$result = $request->execute(array(				':param1' => $user_id,				':param2' => $beer_id,				':param3' => 1,				':param4' => $price			));			$this->writeDump((microtime(true) * 10000));			return 1;		}	}	public function createOrder($user_id, $name, $address, $phone, $beers)	{		$request = $this->db_con->prepare('INSERT INTO `beer_order`( `user_id`, `name`, `phone`,`address`,`beers`,`order_date`) VALUES (:param1,:param2,:param3,:param4,:param5,:param6)');		$result = $request->execute(array(			':param1' => $user_id,			':param2' => $name,			':param3' => $address,			':param4' => $phone,			':param5' => $beers,			':param6' => (new DateTime('now'))->format('Y-m-d H:i:s')		));	}	public function removeBeerFromBasket($user_id, $beer_id)	{		$resp = $this->checkIfBeerExistsInBasket($user_id, $beer_id);		if ($resp)		{			if ($resp == 1)			{				return $resp;			}			$request = $this->db_con->prepare('UPDATE `basket_beer` SET `count`=`count`-1 WHERE `user_id`=:param1 and `beer_id`=:param2');			$request->execute(array(				':param1' => $user_id,				':param2' => $beer_id			));			return $resp - 1;		}		else		{			$request = $this->db_con->prepare('INSERT INTO `basket_beer`( `user_id`, `beer_id`, `count`) VALUES (:param1,:param2,:param3)');			$request->execute(array(				':param1' => $user_id,				':param2' => $beer_id,				':param3' => 1			));			return 1;		}	}	public function deleteBeerFromBasket($user_id, $beer_id)	{		$request = $this->db_con->prepare('delete from `basket_beer` where `user_id`=:param1 and `beer_id`=:param2');		$request->execute(array(			':param1' => $user_id,			':param2' => $beer_id		));	}	public function checkIfBeerExistsInBasket($user_id, $beer_id)	{		$request = $this->db_con->prepare('select * from `basket_beer` where `user_id` = :param1 and `beer_id`=:param2');		$request->execute(array(			':param1' => $user_id,			':param2' => $beer_id		));		$result = $request->fetchAll(PDO::FETCH_OBJ);		if (count($result) == 0)		{			return false;		}		if ($result[0]->count == 0)		{			$this->deleteBeerFromBasket($user_id, $beer_id);			return false;		}		return $result[0]->count;	}	function writeDump($item)	{		ob_flush();		ob_start();		var_dump($item);		file_put_contents("dump.txt", ob_get_flush());	}	public function getOrders($min_id)	{		$request = $this->db_con->prepare('select * from `beer_order` where `status`=0 and `id`>:param1');		$request->execute(array(':param1' => $min_id));		return $request->fetchAll(PDO::FETCH_ASSOC);	}	public function updateOrderStatus($id, $status)	{		$request = $this->db_con->prepare('UPDATE `beer_order` SET `status`=:param1 WHERE `id`=:param2');		$request->execute(array(			':param1' => $status,			':param2' => $id		));	}}